type token =
  | LCURLY
  | RCURLY
  | LPAREN
  | RPAREN
  | COMMA
  | LEN
  | FIND
  | READINT
  | READSET
  | VAR
  | INT of (int)
  | STRING of (string)
  | ASSIGN
  | MULT
  | DIV
  | PLUS
  | DIF
  | MOD
  | PLUSEQ
  | DIFEQ
  | DIVEQ
  | MULTEQ
  | NOTEQ
  | SMALLER
  | BIGGER
  | SMOREQ
  | BIGOREQ
  | EQUAL
  | NOT
  | AND
  | OR
  | IF
  | WHILE
  | EOL
  | EOF
  | CONCAT
  | TRUE
  | FALSE
  | STRDEL
  | PRINTNL
  | PRINT
  | SET
  | ADDTOSET
  | CREATESET
  | PRINTSET
  | UNION
  | INTER
  | SETDIF
  | EMPTYSET

open Parsing;;
let _ = parse_error;;
# 1 "Parser.mly"

open ParseTree
# 58 "Parser.ml"
let yytransl_const = [|
  257 (* LCURLY *);
  258 (* RCURLY *);
  259 (* LPAREN *);
  260 (* RPAREN *);
  261 (* COMMA *);
  262 (* LEN *);
  263 (* FIND *);
  264 (* READINT *);
  265 (* READSET *);
  266 (* VAR *);
  269 (* ASSIGN *);
  270 (* MULT *);
  271 (* DIV *);
  272 (* PLUS *);
  273 (* DIF *);
  274 (* MOD *);
  275 (* PLUSEQ *);
  276 (* DIFEQ *);
  277 (* DIVEQ *);
  278 (* MULTEQ *);
  279 (* NOTEQ *);
  280 (* SMALLER *);
  281 (* BIGGER *);
  282 (* SMOREQ *);
  283 (* BIGOREQ *);
  284 (* EQUAL *);
  285 (* NOT *);
  286 (* AND *);
  287 (* OR *);
  288 (* IF *);
  289 (* WHILE *);
  290 (* EOL *);
    0 (* EOF *);
  291 (* CONCAT *);
  292 (* TRUE *);
  293 (* FALSE *);
  294 (* STRDEL *);
  295 (* PRINTNL *);
  296 (* PRINT *);
  297 (* SET *);
  298 (* ADDTOSET *);
  299 (* CREATESET *);
  300 (* PRINTSET *);
  301 (* UNION *);
  302 (* INTER *);
  303 (* SETDIF *);
  304 (* EMPTYSET *);
    0|]

let yytransl_block = [|
  267 (* INT *);
  268 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\003\000\002\000\001\000\003\000\001\000\005\000\005\000\
\002\000\003\000\002\000\004\000\004\000\004\000\004\000\003\000\
\004\000\004\000\006\000\006\000\006\000\006\000\004\000\004\000\
\003\000\003\000\003\000\003\000\001\000\001\000\001\000\002\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\004\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\034\000\
\000\000\000\000\000\000\030\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\012\000\018\000\000\000\000\000\014\000\000\000\
\000\000\000\000\035\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\008\000\000\000\
\000\000\000\000\000\000\053\000\000\000\019\000\020\000\021\000\
\022\000\000\000\054\000"

let yydgoto = "\002\000\
\006\000\007\000\046\000\063\000\023\000"

let yysindex = "\015\000\
\001\000\000\000\085\255\018\000\000\000\000\000\003\000\019\255\
\021\255\035\255\016\255\036\255\045\255\046\255\051\255\048\255\
\058\255\060\255\080\255\082\255\093\255\011\255\054\255\000\000\
\079\000\000\000\077\255\091\255\092\255\130\255\130\255\130\255\
\130\255\130\255\130\255\130\255\130\255\130\255\095\255\097\255\
\102\255\109\255\110\255\116\255\000\000\085\255\085\255\000\000\
\131\255\134\255\130\255\130\255\136\255\137\255\000\000\000\000\
\130\255\130\255\130\255\000\000\000\000\002\255\044\001\044\001\
\044\001\044\001\044\001\146\255\171\255\196\255\221\255\075\255\
\129\255\139\255\140\255\143\255\144\255\085\255\000\000\000\000\
\044\001\249\255\132\255\141\255\027\255\027\255\084\255\113\255\
\000\000\130\255\130\255\130\255\130\255\130\255\130\255\130\255\
\130\255\130\255\130\255\130\255\130\255\130\255\130\255\004\000\
\004\000\000\000\000\000\000\000\044\001\130\255\000\000\142\255\
\145\255\153\255\000\000\148\255\150\255\000\000\255\254\255\254\
\027\255\027\255\121\255\084\255\084\255\084\255\084\255\084\255\
\084\255\066\001\088\001\044\001\000\000\000\000\000\000\025\000\
\154\255\174\255\175\255\000\000\130\255\000\000\000\000\000\000\
\000\000\050\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\178\255\180\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\255\156\255\
\157\255\158\255\159\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\182\255\000\000\000\000\
\169\255\000\000\000\000\000\000\141\000\157\000\204\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\170\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\000\125\000\
\173\000\189\000\075\000\217\000\229\000\242\000\254\000\011\001\
\023\001\086\255\076\255\252\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\179\255\012\000\230\255\000\000"

let yytablesize = 635
let yytable = "\043\000\
\005\000\006\000\026\000\133\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\045\000\088\000\022\000\001\000\
\094\000\024\000\008\000\009\000\010\000\027\000\011\000\028\000\
\081\000\082\000\134\000\135\000\030\000\043\000\085\000\086\000\
\087\000\103\000\031\000\032\000\033\000\034\000\035\000\089\000\
\090\000\091\000\012\000\013\000\094\000\109\000\029\000\036\000\
\037\000\014\000\015\000\016\000\017\000\038\000\018\000\019\000\
\020\000\021\000\078\000\039\000\040\000\103\000\041\000\119\000\
\120\000\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\130\000\131\000\132\000\052\000\048\000\051\000\
\053\000\054\000\042\000\136\000\043\000\055\000\056\000\047\000\
\049\000\050\000\057\000\058\000\008\000\009\000\010\000\044\000\
\011\000\090\000\091\000\092\000\093\000\094\000\050\000\059\000\
\051\000\051\000\051\000\072\000\073\000\051\000\060\000\061\000\
\062\000\074\000\146\000\050\000\012\000\013\000\103\000\050\000\
\075\000\076\000\108\000\014\000\015\000\016\000\017\000\077\000\
\018\000\019\000\020\000\021\000\052\000\110\000\079\000\053\000\
\054\000\080\000\083\000\084\000\055\000\056\000\111\000\116\000\
\112\000\057\000\058\000\113\000\114\000\104\000\118\000\140\000\
\117\000\137\000\141\000\103\000\138\000\143\000\059\000\090\000\
\091\000\092\000\093\000\094\000\139\000\060\000\061\000\062\000\
\095\000\096\000\097\000\098\000\099\000\100\000\105\000\101\000\
\102\000\144\000\145\000\011\000\103\000\009\000\016\000\010\000\
\090\000\091\000\092\000\093\000\094\000\025\000\028\000\027\000\
\026\000\095\000\096\000\097\000\098\000\099\000\100\000\106\000\
\101\000\102\000\015\000\017\000\000\000\103\000\000\000\000\000\
\000\000\090\000\091\000\092\000\093\000\094\000\000\000\000\000\
\000\000\000\000\095\000\096\000\097\000\098\000\099\000\100\000\
\107\000\101\000\102\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\090\000\091\000\092\000\093\000\094\000\000\000\
\000\000\000\000\000\000\095\000\096\000\097\000\098\000\099\000\
\100\000\000\000\101\000\102\000\115\000\000\000\000\000\103\000\
\000\000\003\000\000\000\000\000\003\000\000\000\090\000\091\000\
\092\000\093\000\094\000\000\000\000\000\000\000\000\000\095\000\
\096\000\097\000\098\000\099\000\100\000\000\000\101\000\102\000\
\000\000\000\000\000\000\103\000\142\000\000\000\000\000\000\000\
\000\000\000\000\004\000\006\000\025\000\000\000\090\000\091\000\
\092\000\093\000\094\000\000\000\000\000\000\000\000\000\095\000\
\096\000\097\000\098\000\099\000\100\000\147\000\101\000\102\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\090\000\
\091\000\092\000\093\000\094\000\000\000\000\000\000\000\000\000\
\095\000\096\000\097\000\098\000\099\000\100\000\040\000\101\000\
\102\000\000\000\000\000\000\000\103\000\000\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\036\000\
\040\000\040\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\036\000\036\000\036\000\036\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\037\000\036\000\036\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\037\000\037\000\037\000\037\000\000\000\000\000\
\042\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\037\000\037\000\042\000\042\000\037\000\000\000\
\041\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\042\000\042\000\041\000\041\000\042\000\000\000\
\038\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\041\000\041\000\038\000\038\000\041\000\000\000\
\039\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\038\000\038\000\039\000\039\000\038\000\052\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\000\000\039\000\039\000\046\000\000\000\039\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\045\000\052\000\052\000\000\000\000\000\052\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\044\000\046\000\046\000\
\000\000\000\000\046\000\045\000\045\000\045\000\045\000\045\000\
\045\000\048\000\045\000\045\000\000\000\000\000\045\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\049\000\044\000\
\044\000\000\000\000\000\044\000\048\000\048\000\048\000\048\000\
\048\000\048\000\047\000\048\000\048\000\000\000\000\000\048\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\049\000\000\000\000\000\049\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\047\000\047\000\000\000\000\000\
\047\000\090\000\091\000\092\000\093\000\094\000\000\000\000\000\
\000\000\000\000\095\000\096\000\097\000\098\000\099\000\100\000\
\000\000\101\000\102\000\000\000\000\000\000\000\103\000\090\000\
\091\000\092\000\093\000\094\000\000\000\000\000\000\000\000\000\
\095\000\096\000\097\000\098\000\099\000\100\000\000\000\000\000\
\102\000\000\000\000\000\000\000\103\000\090\000\091\000\092\000\
\093\000\094\000\000\000\000\000\000\000\000\000\095\000\096\000\
\097\000\098\000\099\000\100\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\000"

let yycheck = "\004\001\
\000\000\000\000\000\000\000\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\002\001\012\001\003\000\001\000\
\018\001\000\000\008\001\009\001\010\001\003\001\012\001\003\001\
\051\000\052\000\104\000\105\000\013\001\034\001\057\000\058\000\
\059\000\035\001\019\001\020\001\021\001\022\001\003\001\038\001\
\014\001\015\001\032\001\033\001\018\001\072\000\012\001\003\001\
\003\001\039\001\040\001\041\001\042\001\003\001\044\001\045\001\
\046\001\047\001\047\000\012\001\003\001\035\001\003\001\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\003\001\000\000\004\001\
\006\001\007\001\003\001\110\000\003\001\011\001\012\001\034\001\
\012\001\004\001\016\001\017\001\008\001\009\001\010\001\003\001\
\012\001\014\001\015\001\016\001\017\001\018\001\012\001\029\001\
\013\001\030\001\031\001\013\001\012\001\034\001\036\001\037\001\
\038\001\012\001\141\000\030\001\032\001\033\001\035\001\034\001\
\012\001\012\001\048\001\039\001\040\001\041\001\042\001\012\001\
\044\001\045\001\046\001\047\001\003\001\005\001\004\001\006\001\
\007\001\004\001\003\001\003\001\011\001\012\001\004\001\012\001\
\005\001\016\001\017\001\005\001\005\001\004\001\038\001\004\001\
\012\001\012\001\005\001\035\001\012\001\004\001\029\001\014\001\
\015\001\016\001\017\001\018\001\012\001\036\001\037\001\038\001\
\023\001\024\001\025\001\026\001\027\001\028\001\004\001\030\001\
\031\001\004\001\004\001\002\001\035\001\002\001\034\001\002\001\
\014\001\015\001\016\001\017\001\018\001\034\001\034\001\034\001\
\034\001\023\001\024\001\025\001\026\001\027\001\028\001\004\001\
\030\001\031\001\034\001\034\001\255\255\035\001\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\004\001\030\001\031\001\255\255\255\255\255\255\035\001\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\004\001\255\255\255\255\035\001\
\255\255\001\001\255\255\255\255\001\001\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\255\255\255\255\255\255\035\001\004\001\255\255\255\255\255\255\
\255\255\255\255\034\001\034\001\034\001\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\004\001\030\001\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\004\001\030\001\
\031\001\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\004\001\
\030\001\031\001\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\004\001\030\001\031\001\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\255\255\255\255\
\004\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\016\001\017\001\034\001\255\255\
\004\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\016\001\017\001\034\001\255\255\
\004\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\016\001\017\001\034\001\255\255\
\004\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\016\001\017\001\034\001\004\001\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\030\001\031\001\004\001\255\255\034\001\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\004\001\030\001\031\001\255\255\255\255\034\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\004\001\030\001\031\001\
\255\255\255\255\034\001\023\001\024\001\025\001\026\001\027\001\
\028\001\004\001\030\001\031\001\255\255\255\255\034\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\004\001\030\001\
\031\001\255\255\255\255\034\001\023\001\024\001\025\001\026\001\
\027\001\028\001\004\001\030\001\031\001\255\255\255\255\034\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\031\001\255\255\255\255\034\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\255\255\255\255\
\034\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\035\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\255\255\035\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001"

let yynames_const = "\
  LCURLY\000\
  RCURLY\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  LEN\000\
  FIND\000\
  READINT\000\
  READSET\000\
  VAR\000\
  ASSIGN\000\
  MULT\000\
  DIV\000\
  PLUS\000\
  DIF\000\
  MOD\000\
  PLUSEQ\000\
  DIFEQ\000\
  DIVEQ\000\
  MULTEQ\000\
  NOTEQ\000\
  SMALLER\000\
  BIGGER\000\
  SMOREQ\000\
  BIGOREQ\000\
  EQUAL\000\
  NOT\000\
  AND\000\
  OR\000\
  IF\000\
  WHILE\000\
  EOL\000\
  EOF\000\
  CONCAT\000\
  TRUE\000\
  FALSE\000\
  STRDEL\000\
  PRINTNL\000\
  PRINT\000\
  SET\000\
  ADDTOSET\000\
  CREATESET\000\
  PRINTSET\000\
  UNION\000\
  INTER\000\
  SETDIF\000\
  EMPTYSET\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "Parser.mly"
                        ( Integer(0) )
# 427 "Parser.ml"
               : ParseTree.parsetree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'scope) in
    Obj.repr(
# 48 "Parser.mly"
                        ( _1 )
# 434 "Parser.ml"
               : ParseTree.parsetree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'scope) in
    Obj.repr(
# 49 "Parser.mly"
                        ( _1 )
# 441 "Parser.ml"
               : ParseTree.parsetree))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "Parser.mly"
                        ( Integer(0) )
# 447 "Parser.ml"
               : ParseTree.parsetree))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 54 "Parser.mly"
                                ( _2 )
# 454 "Parser.ml"
               : 'scope))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "Parser.mly"
                                ( Integer(0) )
# 460 "Parser.ml"
               : 'scope))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'scope) in
    Obj.repr(
# 59 "Parser.mly"
                                        ( ExecuteIf(_3,_5) )
# 468 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'scope) in
    Obj.repr(
# 60 "Parser.mly"
                                        ( ExecuteWhile(_3,_5) )
# 476 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'call) in
    Obj.repr(
# 61 "Parser.mly"
                                        ( SingleStatement(_1) )
# 483 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'call) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 62 "Parser.mly"
                                        ( MultiStatements(_1,_3) )
# 491 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 63 "Parser.mly"
                                        ( MultiStatements(_1,_2) )
# 499 "Parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "Parser.mly"
                                        ( Print(_3) )
# 506 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "Parser.mly"
                                        ( PrintNL(_3) )
# 513 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 69 "Parser.mly"
                                        ( PrintSet(String(_3)) )
# 520 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "Parser.mly"
                                        ( Assign(String(_2),_4) )
# 528 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "Parser.mly"
                                        ( AssignExistingVariable(String(_1),_3) )
# 536 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "Parser.mly"
                                        ( AssignSet(String(_2),_4) )
# 544 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 73 "Parser.mly"
                                        ( AssignEmptySet(String(_2)) )
# 551 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "Parser.mly"
                                                           ( AddToSet(String(_3),_5) )
# 559 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 75 "Parser.mly"
                                                           ( Union(String(_3),String(_5)) )
# 567 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 76 "Parser.mly"
                                                           ( Intersection(String(_3),String(_5)) )
# 575 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 77 "Parser.mly"
                                                           ( SetDifference(String(_3),String(_5)) )
# 583 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 78 "Parser.mly"
                                        ( ReadInt(String(_3)) )
# 590 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 79 "Parser.mly"
                                        ( ReadSet(String(_3)) )
# 597 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "Parser.mly"
                                        ( PlusEqual(String(_1),_3) )
# 605 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "Parser.mly"
                                        ( MultEqual(String(_1),_3) )
# 613 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "Parser.mly"
                                       ( DivEqual(String(_1),_3) )
# 621 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "Parser.mly"
                                       ( MinusEqual(String(_1),_3) )
# 629 "Parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "Parser.mly"
                            ( Integer(_1) )
# 636 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "Parser.mly"
                            ( Boolean(true) )
# 642 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "Parser.mly"
                            ( Boolean(false) )
# 648 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "Parser.mly"
                            ( String("") )
# 654 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 92 "Parser.mly"
                            ( String(_2) )
# 661 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "Parser.mly"
                            ( GetVariable(String(_1)) )
# 668 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "Parser.mly"
                            ( _2 )
# 675 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "Parser.mly"
                        ( Mult(_1,_3) )
# 683 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "Parser.mly"
                                                            ( Div(_1,_3) )
# 691 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "Parser.mly"
                        ( Sum(_1,_3) )
# 699 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "Parser.mly"
                                                            ( Dif(_1,_3) )
# 707 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "Parser.mly"
                        ( Mod(_1,_3) )
# 715 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "Parser.mly"
                        ( Dif(Integer(0),_2) )
# 722 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "Parser.mly"
                                                                   ( Sum(Integer(0),_2) )
# 729 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "Parser.mly"
                        ( Concat(_1,_3) )
# 737 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "Parser.mly"
                        (IsBigger(_1,_3))
# 745 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "Parser.mly"
                                                              (IsSmaller(_1,_3))
# 753 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "Parser.mly"
                      (IsNotEqual(_1,_3))
# 761 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "Parser.mly"
                                                            (IsEqual(_1,_3))
# 769 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "Parser.mly"
                       (IsSmallerOrEqual(_1,_3))
# 777 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "Parser.mly"
                                                                     (IsBiggerOrEqual(_1,_3))
# 785 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "Parser.mly"
                    ( AndOperator(_1,_3) )
# 793 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "Parser.mly"
                                                          ( OrOperator(_1,_3) )
# 801 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "Parser.mly"
                    ( NotOperator(_2) )
# 808 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 110 "Parser.mly"
                                        ( Length(String(_3)) )
# 815 "Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "Parser.mly"
                                                   ( Find(String(_3),_5) )
# 823 "Parser.ml"
               : 'expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ParseTree.parsetree)
